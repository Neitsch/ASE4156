// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InvestBucketRelay render minimal 1`] = `
<CtxProvider>
  <div>
    <Relay(InvestBucketRelay)
      bucket={
        Object {
          "__fragments": Object {
            "InvestBucketRelay_bucket": Object {},
          },
          "__id": "1",
          "description": null,
          "id": "1",
          "isOwner": false,
          "name": "Bucket name",
          "public": true,
        }
      }
    >
      <InvestBucketRelay
        bucket={
          Object {
            "__fragments": Object {
              "InvestBucketRelay_bucket": Object {},
            },
            "__id": "1",
            "description": null,
            "id": "1",
            "isOwner": false,
            "name": "Bucket name",
            "public": true,
          }
        }
        relay={
          Object {
            "environment": RelayModernEnvironment {
              "__setNet": [Function],
              "_debugger": EnvironmentDebugger {
                "_envIsDirty": false,
                "_environment": [Circular],
                "_id": "RelayModernEnvironment1",
                "_isRecordingMutationEvents": false,
                "_recordedMutationEvents": Array [],
              },
              "_network": [Function],
              "_publishQueue": RelayPublishQueue {
                "_appliedOptimisticUpdates": Set {},
                "_backup": Object {},
                "_handlerProvider": [Function],
                "_pendingBackupRebase": false,
                "_pendingData": Set {},
                "_pendingOptimisticUpdates": Set {},
                "_pendingUpdaters": Set {},
                "_store": RelayMarkSweepStore {
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Map {},
                  "_subscriptions": Set {
                    Object {
                      "callback": [Function],
                      "snapshot": Object {
                        "data": undefined,
                        "dataID": "1",
                        "node": Object {
                          "argumentDefinitions": Array [
                            Object {
                              "defaultValue": 2,
                              "kind": "LocalArgument",
                              "name": "first",
                              "type": "Int!",
                            },
                          ],
                          "kind": "Fragment",
                          "metadata": Object {
                            "connection": Array [
                              Object {
                                "count": "first",
                                "cursor": null,
                                "direction": "forward",
                                "path": Array [
                                  "description",
                                ],
                              },
                            ],
                          },
                          "name": "InvestBucketRelay_bucket",
                          "selections": Array [
                            Object {
                              "alias": null,
                              "args": null,
                              "kind": "ScalarField",
                              "name": "id",
                              "storageKey": null,
                            },
                            Object {
                              "alias": null,
                              "args": null,
                              "kind": "ScalarField",
                              "name": "name",
                              "storageKey": null,
                            },
                            Object {
                              "alias": null,
                              "args": null,
                              "kind": "ScalarField",
                              "name": "public",
                              "storageKey": null,
                            },
                            Object {
                              "alias": null,
                              "args": null,
                              "kind": "ScalarField",
                              "name": "isOwner",
                              "storageKey": null,
                            },
                            Object {
                              "alias": "description",
                              "args": null,
                              "concreteType": "GInvestmentBucketAttributeConnection",
                              "kind": "LinkedField",
                              "name": "__InvestBucketRelay_description_connection",
                              "plural": false,
                              "selections": Array [
                                Object {
                                  "alias": null,
                                  "args": null,
                                  "concreteType": "GInvestmentBucketAttributeEdge",
                                  "kind": "LinkedField",
                                  "name": "edges",
                                  "plural": true,
                                  "selections": Array [
                                    Object {
                                      "alias": null,
                                      "args": null,
                                      "concreteType": "GInvestmentBucketAttribute",
                                      "kind": "LinkedField",
                                      "name": "node",
                                      "plural": false,
                                      "selections": Array [
                                        Object {
                                          "alias": null,
                                          "args": null,
                                          "kind": "ScalarField",
                                          "name": "id",
                                          "storageKey": null,
                                        },
                                        Object {
                                          "alias": null,
                                          "args": null,
                                          "kind": "ScalarField",
                                          "name": "text",
                                          "storageKey": null,
                                        },
                                        Object {
                                          "alias": null,
                                          "args": null,
                                          "kind": "ScalarField",
                                          "name": "isGood",
                                          "storageKey": null,
                                        },
                                        Object {
                                          "alias": null,
                                          "args": null,
                                          "kind": "ScalarField",
                                          "name": "__typename",
                                          "storageKey": null,
                                        },
                                      ],
                                      "storageKey": null,
                                    },
                                    Object {
                                      "alias": null,
                                      "args": null,
                                      "kind": "ScalarField",
                                      "name": "cursor",
                                      "storageKey": null,
                                    },
                                  ],
                                  "storageKey": null,
                                },
                                Object {
                                  "alias": null,
                                  "args": null,
                                  "concreteType": "PageInfo",
                                  "kind": "LinkedField",
                                  "name": "pageInfo",
                                  "plural": false,
                                  "selections": Array [
                                    Object {
                                      "alias": null,
                                      "args": null,
                                      "kind": "ScalarField",
                                      "name": "hasNextPage",
                                      "storageKey": null,
                                    },
                                    Object {
                                      "alias": null,
                                      "args": null,
                                      "kind": "ScalarField",
                                      "name": "endCursor",
                                      "storageKey": null,
                                    },
                                  ],
                                  "storageKey": null,
                                },
                              ],
                              "storageKey": null,
                            },
                            Object {
                              "args": null,
                              "kind": "FragmentSpread",
                              "name": "InvestCompositionRelay_bucket",
                            },
                            Object {
                              "args": null,
                              "kind": "FragmentSpread",
                              "name": "InvestPanelRelay_bucket",
                            },
                          ],
                          "type": "GInvestmentBucket",
                        },
                        "seenRecords": Object {
                          "1": undefined,
                        },
                        "variables": Object {
                          "first": 2,
                        },
                      },
                    },
                  },
                  "_updatedRecordIDs": Object {},
                },
              },
              "_store": RelayMarkSweepStore {
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Map {},
                "_subscriptions": Set {
                  Object {
                    "callback": [Function],
                    "snapshot": Object {
                      "data": undefined,
                      "dataID": "1",
                      "node": Object {
                        "argumentDefinitions": Array [
                          Object {
                            "defaultValue": 2,
                            "kind": "LocalArgument",
                            "name": "first",
                            "type": "Int!",
                          },
                        ],
                        "kind": "Fragment",
                        "metadata": Object {
                          "connection": Array [
                            Object {
                              "count": "first",
                              "cursor": null,
                              "direction": "forward",
                              "path": Array [
                                "description",
                              ],
                            },
                          ],
                        },
                        "name": "InvestBucketRelay_bucket",
                        "selections": Array [
                          Object {
                            "alias": null,
                            "args": null,
                            "kind": "ScalarField",
                            "name": "id",
                            "storageKey": null,
                          },
                          Object {
                            "alias": null,
                            "args": null,
                            "kind": "ScalarField",
                            "name": "name",
                            "storageKey": null,
                          },
                          Object {
                            "alias": null,
                            "args": null,
                            "kind": "ScalarField",
                            "name": "public",
                            "storageKey": null,
                          },
                          Object {
                            "alias": null,
                            "args": null,
                            "kind": "ScalarField",
                            "name": "isOwner",
                            "storageKey": null,
                          },
                          Object {
                            "alias": "description",
                            "args": null,
                            "concreteType": "GInvestmentBucketAttributeConnection",
                            "kind": "LinkedField",
                            "name": "__InvestBucketRelay_description_connection",
                            "plural": false,
                            "selections": Array [
                              Object {
                                "alias": null,
                                "args": null,
                                "concreteType": "GInvestmentBucketAttributeEdge",
                                "kind": "LinkedField",
                                "name": "edges",
                                "plural": true,
                                "selections": Array [
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "concreteType": "GInvestmentBucketAttribute",
                                    "kind": "LinkedField",
                                    "name": "node",
                                    "plural": false,
                                    "selections": Array [
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "id",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "text",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "isGood",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "__typename",
                                        "storageKey": null,
                                      },
                                    ],
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "cursor",
                                    "storageKey": null,
                                  },
                                ],
                                "storageKey": null,
                              },
                              Object {
                                "alias": null,
                                "args": null,
                                "concreteType": "PageInfo",
                                "kind": "LinkedField",
                                "name": "pageInfo",
                                "plural": false,
                                "selections": Array [
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "hasNextPage",
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "endCursor",
                                    "storageKey": null,
                                  },
                                ],
                                "storageKey": null,
                              },
                            ],
                            "storageKey": null,
                          },
                          Object {
                            "args": null,
                            "kind": "FragmentSpread",
                            "name": "InvestCompositionRelay_bucket",
                          },
                          Object {
                            "args": null,
                            "kind": "FragmentSpread",
                            "name": "InvestPanelRelay_bucket",
                          },
                        ],
                        "type": "GInvestmentBucket",
                      },
                      "seenRecords": Object {
                        "1": undefined,
                      },
                      "variables": Object {
                        "first": 2,
                      },
                    },
                  },
                },
                "_updatedRecordIDs": Object {},
              },
              "configName": undefined,
              "unstable_internal": Object {
                "areEqualSelectors": [Function],
                "createFragmentSpecResolver": [Function],
                "createOperationSelector": [Function],
                "getDataIDsFromObject": [Function],
                "getFragment": [Function],
                "getOperation": [Function],
                "getSelector": [Function],
                "getSelectorList": [Function],
                "getSelectorsFromObject": [Function],
                "getVariablesFromObject": [Function],
              },
            },
            "refetch": [Function],
          }
        }
      >
        <div>
          <withStyles(Dialog)
            onRequestClose={[Function]}
            open={false}
          >
            <Dialog
              classes={
                Object {
                  ".MuiDialog-paper-2:focus": "MuiDialog-paper-2:focus",
                  "fullScreen": "MuiDialog-fullScreen-7",
                  "fullWidth": "MuiDialog-fullWidth-6",
                  "paper": "MuiDialog-paper-2",
                  "paperWidthMd": "MuiDialog-paperWidthMd-5",
                  "paperWidthSm": "MuiDialog-paperWidthSm-4",
                  "paperWidthXs": "MuiDialog-paperWidthXs-3",
                  "root": "MuiDialog-root-1",
                }
              }
              fullScreen={false}
              fullWidth={false}
              ignoreBackdropClick={false}
              ignoreEscapeKeyUp={false}
              maxWidth="sm"
              onRequestClose={[Function]}
              open={false}
              transition={[Function]}
              transitionDuration={
                Object {
                  "enter": 225,
                  "exit": 195,
                }
              }
            >
              <withStyles(Modal)
                backdropTransitionDuration={
                  Object {
                    "enter": 225,
                    "exit": 195,
                  }
                }
                className="MuiDialog-root-1"
                ignoreBackdropClick={false}
                ignoreEscapeKeyUp={false}
                onRequestClose={[Function]}
                show={false}
              >
                <Modal
                  backdropComponent={[Function]}
                  backdropInvisible={false}
                  backdropTransitionDuration={
                    Object {
                      "enter": 225,
                      "exit": 195,
                    }
                  }
                  className="MuiDialog-root-1"
                  classes={
                    Object {
                      "hidden": "MuiModal-hidden-9",
                      "root": "MuiModal-root-8",
                    }
                  }
                  disableBackdrop={false}
                  ignoreBackdropClick={false}
                  ignoreEscapeKeyUp={false}
                  keepMounted={false}
                  modalManager={
                    Object {
                      "add": [Function],
                      "isTopModal": [Function],
                      "remove": [Function],
                    }
                  }
                  onRequestClose={[Function]}
                  show={false}
                />
              </withStyles(Modal)>
            </Dialog>
          </withStyles(Dialog)>
          <InvestBucket
            attributes={
              Object {
                "bad": Array [],
                "good": Array [],
              }
            }
            deleteFunc={null}
            editCompositionFunc={null}
            editFunc={null}
            investFunc={[Function]}
            seeMoreFunc={null}
            title="Bucket name"
          >
            <Card
              raised={false}
            >
              <withStyles(Paper)
                elevation={2}
              >
                <Paper
                  classes={
                    Object {
                      "root": "MuiPaper-root-10",
                      "rounded": "MuiPaper-rounded-11",
                      "shadow0": "MuiPaper-shadow0-12",
                      "shadow1": "MuiPaper-shadow1-13",
                      "shadow10": "MuiPaper-shadow10-22",
                      "shadow11": "MuiPaper-shadow11-23",
                      "shadow12": "MuiPaper-shadow12-24",
                      "shadow13": "MuiPaper-shadow13-25",
                      "shadow14": "MuiPaper-shadow14-26",
                      "shadow15": "MuiPaper-shadow15-27",
                      "shadow16": "MuiPaper-shadow16-28",
                      "shadow17": "MuiPaper-shadow17-29",
                      "shadow18": "MuiPaper-shadow18-30",
                      "shadow19": "MuiPaper-shadow19-31",
                      "shadow2": "MuiPaper-shadow2-14",
                      "shadow20": "MuiPaper-shadow20-32",
                      "shadow21": "MuiPaper-shadow21-33",
                      "shadow22": "MuiPaper-shadow22-34",
                      "shadow23": "MuiPaper-shadow23-35",
                      "shadow24": "MuiPaper-shadow24-36",
                      "shadow3": "MuiPaper-shadow3-15",
                      "shadow4": "MuiPaper-shadow4-16",
                      "shadow5": "MuiPaper-shadow5-17",
                      "shadow6": "MuiPaper-shadow6-18",
                      "shadow7": "MuiPaper-shadow7-19",
                      "shadow8": "MuiPaper-shadow8-20",
                      "shadow9": "MuiPaper-shadow9-21",
                    }
                  }
                  component="div"
                  elevation={2}
                  square={false}
                >
                  <div
                    className="MuiPaper-root-10 MuiPaper-shadow2-14 MuiPaper-rounded-11"
                  >
                    <withStyles(CardHeader)
                      title="Bucket name"
                    >
                      <CardHeader
                        classes={
                          Object {
                            "avatar": "MuiCardHeader-avatar-38",
                            "content": "MuiCardHeader-content-39",
                            "root": "MuiCardHeader-root-37",
                            "subheader": "MuiCardHeader-subheader-41",
                            "title": "MuiCardHeader-title-40",
                          }
                        }
                        title="Bucket name"
                      >
                        <withStyles(CardContent)
                          className="MuiCardHeader-root-37"
                        >
                          <CardContent
                            className="MuiCardHeader-root-37"
                            classes={
                              Object {
                                ".MuiCardContent-root-42:last-child": "MuiCardContent-root-42:last-child",
                                "root": "MuiCardContent-root-42",
                              }
                            }
                          >
                            <div
                              className="MuiCardContent-root-42 MuiCardHeader-root-37"
                            >
                              <div
                                className="MuiCardHeader-content-39"
                              >
                                <withStyles(Typography)
                                  className="MuiCardHeader-title-40"
                                  component="span"
                                  type="headline"
                                >
                                  <Typography
                                    align="inherit"
                                    className="MuiCardHeader-title-40"
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter-56",
                                        "alignJustify": "MuiTypography-alignJustify-58",
                                        "alignLeft": "MuiTypography-alignLeft-55",
                                        "alignRight": "MuiTypography-alignRight-57",
                                        "body1": "MuiTypography-body1-52",
                                        "body2": "MuiTypography-body2-51",
                                        "button": "MuiTypography-button-54",
                                        "caption": "MuiTypography-caption-53",
                                        "colorAccent": "MuiTypography-colorAccent-65",
                                        "colorError": "MuiTypography-colorError-66",
                                        "colorInherit": "MuiTypography-colorInherit-62",
                                        "colorPrimary": "MuiTypography-colorPrimary-63",
                                        "colorSecondary": "MuiTypography-colorSecondary-64",
                                        "display1": "MuiTypography-display1-47",
                                        "display2": "MuiTypography-display2-46",
                                        "display3": "MuiTypography-display3-45",
                                        "display4": "MuiTypography-display4-44",
                                        "gutterBottom": "MuiTypography-gutterBottom-60",
                                        "headline": "MuiTypography-headline-48",
                                        "noWrap": "MuiTypography-noWrap-59",
                                        "paragraph": "MuiTypography-paragraph-61",
                                        "root": "MuiTypography-root-43",
                                        "subheading": "MuiTypography-subheading-50",
                                        "title": "MuiTypography-title-49",
                                      }
                                    }
                                    color="default"
                                    component="span"
                                    gutterBottom={false}
                                    headlineMapping={
                                      Object {
                                        "body1": "p",
                                        "body2": "aside",
                                        "display1": "h1",
                                        "display2": "h1",
                                        "display3": "h1",
                                        "display4": "h1",
                                        "headline": "h1",
                                        "subheading": "h3",
                                        "title": "h2",
                                      }
                                    }
                                    noWrap={false}
                                    paragraph={false}
                                    type="headline"
                                  >
                                    <span
                                      className="MuiTypography-root-43 MuiTypography-headline-48 MuiCardHeader-title-40"
                                    >
                                      Bucket name
                                    </span>
                                  </Typography>
                                </withStyles(Typography)>
                                <withStyles(Typography)
                                  className="MuiCardHeader-subheader-41"
                                  color="secondary"
                                  component="span"
                                  type="body1"
                                >
                                  <Typography
                                    align="inherit"
                                    className="MuiCardHeader-subheader-41"
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter-56",
                                        "alignJustify": "MuiTypography-alignJustify-58",
                                        "alignLeft": "MuiTypography-alignLeft-55",
                                        "alignRight": "MuiTypography-alignRight-57",
                                        "body1": "MuiTypography-body1-52",
                                        "body2": "MuiTypography-body2-51",
                                        "button": "MuiTypography-button-54",
                                        "caption": "MuiTypography-caption-53",
                                        "colorAccent": "MuiTypography-colorAccent-65",
                                        "colorError": "MuiTypography-colorError-66",
                                        "colorInherit": "MuiTypography-colorInherit-62",
                                        "colorPrimary": "MuiTypography-colorPrimary-63",
                                        "colorSecondary": "MuiTypography-colorSecondary-64",
                                        "display1": "MuiTypography-display1-47",
                                        "display2": "MuiTypography-display2-46",
                                        "display3": "MuiTypography-display3-45",
                                        "display4": "MuiTypography-display4-44",
                                        "gutterBottom": "MuiTypography-gutterBottom-60",
                                        "headline": "MuiTypography-headline-48",
                                        "noWrap": "MuiTypography-noWrap-59",
                                        "paragraph": "MuiTypography-paragraph-61",
                                        "root": "MuiTypography-root-43",
                                        "subheading": "MuiTypography-subheading-50",
                                        "title": "MuiTypography-title-49",
                                      }
                                    }
                                    color="secondary"
                                    component="span"
                                    gutterBottom={false}
                                    headlineMapping={
                                      Object {
                                        "body1": "p",
                                        "body2": "aside",
                                        "display1": "h1",
                                        "display2": "h1",
                                        "display3": "h1",
                                        "display4": "h1",
                                        "headline": "h1",
                                        "subheading": "h3",
                                        "title": "h2",
                                      }
                                    }
                                    noWrap={false}
                                    paragraph={false}
                                    type="body1"
                                  >
                                    <span
                                      className="MuiTypography-root-43 MuiTypography-body1-52 MuiTypography-colorSecondary-64 MuiCardHeader-subheader-41"
                                    />
                                  </Typography>
                                </withStyles(Typography)>
                              </div>
                            </div>
                          </CardContent>
                        </withStyles(CardContent)>
                      </CardHeader>
                    </withStyles(CardHeader)>
                    <withStyles(CardContent)>
                      <CardContent
                        classes={
                          Object {
                            ".MuiCardContent-root-42:last-child": "MuiCardContent-root-42:last-child",
                            "root": "MuiCardContent-root-42",
                          }
                        }
                      >
                        <div
                          className="MuiCardContent-root-42"
                        >
                          <withStyles(List)>
                            <List
                              classes={
                                Object {
                                  "dense": "MuiList-dense-69",
                                  "padding": "MuiList-padding-68",
                                  "root": "MuiList-root-67",
                                  "subheader": "MuiList-subheader-70",
                                }
                              }
                              component="ul"
                              dense={false}
                              disablePadding={false}
                            >
                              <ul
                                className="MuiList-root-67 MuiList-padding-68"
                              />
                            </List>
                          </withStyles(List)>
                        </div>
                      </CardContent>
                    </withStyles(CardContent)>
                    <withStyles(CardActions)>
                      <CardActions
                        classes={
                          Object {
                            "actionSpacing": "MuiCardActions-actionSpacing-72",
                            "root": "MuiCardActions-root-71",
                          }
                        }
                        disableActionSpacing={false}
                      >
                        <div
                          className="MuiCardActions-root-71"
                        >
                          <withStyles(Button)
                            className="MuiCardActions-actionSpacing-72"
                            color="primary"
                            dense={true}
                            key=".0"
                            onClick={[Function]}
                          >
                            <Button
                              className="MuiCardActions-actionSpacing-72"
                              classes={
                                Object {
                                  ".MuiButton-fab-86:active": "MuiButton-fab-86:active",
                                  ".MuiButton-flatAccent-77:hover": "MuiButton-flatAccent-77:hover",
                                  ".MuiButton-flatContrast-78:hover": "MuiButton-flatContrast-78:hover",
                                  ".MuiButton-flatPrimary-76:hover": "MuiButton-flatPrimary-76:hover",
                                  ".MuiButton-raised-80.MuiButton-disabled-85": "MuiButton-raised-80.MuiButton-disabled-85",
                                  ".MuiButton-raised-80.MuiButton-keyboardFocused-81": "MuiButton-raised-80.MuiButton-keyboardFocused-81",
                                  ".MuiButton-raised-80:active": "MuiButton-raised-80:active",
                                  ".MuiButton-raised-80:hover": "MuiButton-raised-80:hover",
                                  ".MuiButton-raised-80:hover.MuiButton-disabled-85": "MuiButton-raised-80:hover.MuiButton-disabled-85",
                                  ".MuiButton-raisedAccent-83:hover": "MuiButton-raisedAccent-83:hover",
                                  ".MuiButton-raisedPrimary-82:hover": "MuiButton-raisedPrimary-82:hover",
                                  ".MuiButton-root-73:hover": "MuiButton-root-73:hover",
                                  ".MuiButton-root-73:hover.MuiButton-disabled-85": "MuiButton-root-73:hover.MuiButton-disabled-85",
                                  "colorInherit": "MuiButton-colorInherit-79",
                                  "dense": "MuiButton-dense-74",
                                  "disabled": "MuiButton-disabled-85",
                                  "fab": "MuiButton-fab-86",
                                  "flatAccent": "MuiButton-flatAccent-77",
                                  "flatContrast": "MuiButton-flatContrast-78",
                                  "flatPrimary": "MuiButton-flatPrimary-76",
                                  "keyboardFocused": "MuiButton-keyboardFocused-81",
                                  "label": "MuiButton-label-75",
                                  "raised": "MuiButton-raised-80",
                                  "raisedAccent": "MuiButton-raisedAccent-83",
                                  "raisedContrast": "MuiButton-raisedContrast-84",
                                  "raisedPrimary": "MuiButton-raisedPrimary-82",
                                  "root": "MuiButton-root-73",
                                }
                              }
                              color="primary"
                              dense={true}
                              disableFocusRipple={false}
                              disableRipple={false}
                              disabled={false}
                              fab={false}
                              onClick={[Function]}
                              raised={false}
                              type="button"
                            >
                              <withStyles(ButtonBase)
                                className="MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                disableRipple={false}
                                disabled={false}
                                focusRipple={true}
                                keyboardFocusedClassName="MuiButton-keyboardFocused-81"
                                onClick={[Function]}
                                type="button"
                              >
                                <ButtonBase
                                  centerRipple={false}
                                  className="MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                  classes={
                                    Object {
                                      "disabled": "MuiButtonBase-disabled-88",
                                      "root": "MuiButtonBase-root-87",
                                    }
                                  }
                                  disableRipple={false}
                                  disabled={false}
                                  focusRipple={true}
                                  keyboardFocusedClassName="MuiButton-keyboardFocused-81"
                                  onClick={[Function]}
                                  tabIndex={0}
                                  type="button"
                                >
                                  <button
                                    className="MuiButtonBase-root-87 MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                    disabled={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchStart={[Function]}
                                    role="button"
                                    tabIndex={0}
                                    type="button"
                                  >
                                    <span
                                      className="MuiButton-label-75"
                                    >
                                      Invest
                                    </span>
                                    <withStyles(TouchRipple)
                                      center={false}
                                      innerRef={[Function]}
                                    >
                                      <TouchRipple
                                        center={false}
                                        classes={
                                          Object {
                                            "0%": "%",
                                            "100%": "00%",
                                            "50%": "0%",
                                            "ripple": "MuiTouchRipple-ripple-93",
                                            "rippleFast": "MuiTouchRipple-rippleFast-95",
                                            "rippleVisible": "MuiTouchRipple-rippleVisible-94",
                                            "root": "MuiTouchRipple-root-89",
                                            "wrapper": "MuiTouchRipple-wrapper-90",
                                            "wrapperLeaving": "MuiTouchRipple-wrapperLeaving-91",
                                            "wrapperPulsating": "MuiTouchRipple-wrapperPulsating-92",
                                          }
                                        }
                                      >
                                        <TransitionGroup
                                          childFactory={[Function]}
                                          className="MuiTouchRipple-root-89"
                                          component="span"
                                          enter={true}
                                          exit={true}
                                        >
                                          <span
                                            className="MuiTouchRipple-root-89"
                                          />
                                        </TransitionGroup>
                                      </TouchRipple>
                                    </withStyles(TouchRipple)>
                                  </button>
                                </ButtonBase>
                              </withStyles(ButtonBase)>
                            </Button>
                          </withStyles(Button)>
                        </div>
                      </CardActions>
                    </withStyles(CardActions)>
                  </div>
                </Paper>
              </withStyles(Paper)>
            </Card>
          </InvestBucket>
        </div>
      </InvestBucketRelay>
    </Relay(InvestBucketRelay)>
  </div>
</CtxProvider>
`;

exports[`InvestBucketRelay render owner 1`] = `
<CtxProvider>
  <div>
    <Relay(InvestBucketRelay)
      bucket={
        Object {
          "__fragments": Object {
            "InvestBucketRelay_bucket": Object {},
          },
          "__id": "1",
          "description": Object {
            "edges": Array [
              Object {
                "node": Object {
                  "id": "2",
                  "isGood": true,
                  "text": "my text",
                },
              },
              Object {
                "node": Object {
                  "id": "3",
                  "isGood": false,
                  "text": "my bad text",
                },
              },
              null,
            ],
            "pageInfo": Object {
              "hasNextPage": false,
            },
          },
          "id": "1",
          "isOwner": true,
          "name": "Bucket name",
          "public": false,
        }
      }
    >
      <InvestBucketRelay
        bucket={
          Object {
            "__fragments": Object {
              "InvestBucketRelay_bucket": Object {},
            },
            "__id": "1",
            "description": Object {
              "edges": Array [
                Object {
                  "node": Object {
                    "id": "2",
                    "isGood": true,
                    "text": "my text",
                  },
                },
                Object {
                  "node": Object {
                    "id": "3",
                    "isGood": false,
                    "text": "my bad text",
                  },
                },
                null,
              ],
              "pageInfo": Object {
                "hasNextPage": false,
              },
            },
            "id": "1",
            "isOwner": true,
            "name": "Bucket name",
            "public": false,
          }
        }
        relay={
          Object {
            "environment": RelayModernEnvironment {
              "__setNet": [Function],
              "_debugger": EnvironmentDebugger {
                "_envIsDirty": false,
                "_environment": [Circular],
                "_id": "RelayModernEnvironment2",
                "_isRecordingMutationEvents": false,
                "_recordedMutationEvents": Array [],
              },
              "_network": [Function],
              "_publishQueue": RelayPublishQueue {
                "_appliedOptimisticUpdates": Set {},
                "_backup": Object {},
                "_handlerProvider": [Function],
                "_pendingBackupRebase": false,
                "_pendingData": Set {},
                "_pendingOptimisticUpdates": Set {},
                "_pendingUpdaters": Set {},
                "_store": RelayMarkSweepStore {
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Map {},
                  "_subscriptions": Set {
                    Object {
                      "callback": [Function],
                      "snapshot": Object {
                        "data": undefined,
                        "dataID": "1",
                        "node": Object {
                          "argumentDefinitions": Array [
                            Object {
                              "defaultValue": 2,
                              "kind": "LocalArgument",
                              "name": "first",
                              "type": "Int!",
                            },
                          ],
                          "kind": "Fragment",
                          "metadata": Object {
                            "connection": Array [
                              Object {
                                "count": "first",
                                "cursor": null,
                                "direction": "forward",
                                "path": Array [
                                  "description",
                                ],
                              },
                            ],
                          },
                          "name": "InvestBucketRelay_bucket",
                          "selections": Array [
                            Object {
                              "alias": null,
                              "args": null,
                              "kind": "ScalarField",
                              "name": "id",
                              "storageKey": null,
                            },
                            Object {
                              "alias": null,
                              "args": null,
                              "kind": "ScalarField",
                              "name": "name",
                              "storageKey": null,
                            },
                            Object {
                              "alias": null,
                              "args": null,
                              "kind": "ScalarField",
                              "name": "public",
                              "storageKey": null,
                            },
                            Object {
                              "alias": null,
                              "args": null,
                              "kind": "ScalarField",
                              "name": "isOwner",
                              "storageKey": null,
                            },
                            Object {
                              "alias": "description",
                              "args": null,
                              "concreteType": "GInvestmentBucketAttributeConnection",
                              "kind": "LinkedField",
                              "name": "__InvestBucketRelay_description_connection",
                              "plural": false,
                              "selections": Array [
                                Object {
                                  "alias": null,
                                  "args": null,
                                  "concreteType": "GInvestmentBucketAttributeEdge",
                                  "kind": "LinkedField",
                                  "name": "edges",
                                  "plural": true,
                                  "selections": Array [
                                    Object {
                                      "alias": null,
                                      "args": null,
                                      "concreteType": "GInvestmentBucketAttribute",
                                      "kind": "LinkedField",
                                      "name": "node",
                                      "plural": false,
                                      "selections": Array [
                                        Object {
                                          "alias": null,
                                          "args": null,
                                          "kind": "ScalarField",
                                          "name": "id",
                                          "storageKey": null,
                                        },
                                        Object {
                                          "alias": null,
                                          "args": null,
                                          "kind": "ScalarField",
                                          "name": "text",
                                          "storageKey": null,
                                        },
                                        Object {
                                          "alias": null,
                                          "args": null,
                                          "kind": "ScalarField",
                                          "name": "isGood",
                                          "storageKey": null,
                                        },
                                        Object {
                                          "alias": null,
                                          "args": null,
                                          "kind": "ScalarField",
                                          "name": "__typename",
                                          "storageKey": null,
                                        },
                                      ],
                                      "storageKey": null,
                                    },
                                    Object {
                                      "alias": null,
                                      "args": null,
                                      "kind": "ScalarField",
                                      "name": "cursor",
                                      "storageKey": null,
                                    },
                                  ],
                                  "storageKey": null,
                                },
                                Object {
                                  "alias": null,
                                  "args": null,
                                  "concreteType": "PageInfo",
                                  "kind": "LinkedField",
                                  "name": "pageInfo",
                                  "plural": false,
                                  "selections": Array [
                                    Object {
                                      "alias": null,
                                      "args": null,
                                      "kind": "ScalarField",
                                      "name": "hasNextPage",
                                      "storageKey": null,
                                    },
                                    Object {
                                      "alias": null,
                                      "args": null,
                                      "kind": "ScalarField",
                                      "name": "endCursor",
                                      "storageKey": null,
                                    },
                                  ],
                                  "storageKey": null,
                                },
                              ],
                              "storageKey": null,
                            },
                            Object {
                              "args": null,
                              "kind": "FragmentSpread",
                              "name": "InvestCompositionRelay_bucket",
                            },
                            Object {
                              "args": null,
                              "kind": "FragmentSpread",
                              "name": "InvestPanelRelay_bucket",
                            },
                          ],
                          "type": "GInvestmentBucket",
                        },
                        "seenRecords": Object {
                          "1": undefined,
                        },
                        "variables": Object {
                          "first": 2,
                        },
                      },
                    },
                  },
                  "_updatedRecordIDs": Object {},
                },
              },
              "_store": RelayMarkSweepStore {
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Map {},
                "_subscriptions": Set {
                  Object {
                    "callback": [Function],
                    "snapshot": Object {
                      "data": undefined,
                      "dataID": "1",
                      "node": Object {
                        "argumentDefinitions": Array [
                          Object {
                            "defaultValue": 2,
                            "kind": "LocalArgument",
                            "name": "first",
                            "type": "Int!",
                          },
                        ],
                        "kind": "Fragment",
                        "metadata": Object {
                          "connection": Array [
                            Object {
                              "count": "first",
                              "cursor": null,
                              "direction": "forward",
                              "path": Array [
                                "description",
                              ],
                            },
                          ],
                        },
                        "name": "InvestBucketRelay_bucket",
                        "selections": Array [
                          Object {
                            "alias": null,
                            "args": null,
                            "kind": "ScalarField",
                            "name": "id",
                            "storageKey": null,
                          },
                          Object {
                            "alias": null,
                            "args": null,
                            "kind": "ScalarField",
                            "name": "name",
                            "storageKey": null,
                          },
                          Object {
                            "alias": null,
                            "args": null,
                            "kind": "ScalarField",
                            "name": "public",
                            "storageKey": null,
                          },
                          Object {
                            "alias": null,
                            "args": null,
                            "kind": "ScalarField",
                            "name": "isOwner",
                            "storageKey": null,
                          },
                          Object {
                            "alias": "description",
                            "args": null,
                            "concreteType": "GInvestmentBucketAttributeConnection",
                            "kind": "LinkedField",
                            "name": "__InvestBucketRelay_description_connection",
                            "plural": false,
                            "selections": Array [
                              Object {
                                "alias": null,
                                "args": null,
                                "concreteType": "GInvestmentBucketAttributeEdge",
                                "kind": "LinkedField",
                                "name": "edges",
                                "plural": true,
                                "selections": Array [
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "concreteType": "GInvestmentBucketAttribute",
                                    "kind": "LinkedField",
                                    "name": "node",
                                    "plural": false,
                                    "selections": Array [
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "id",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "text",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "isGood",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "__typename",
                                        "storageKey": null,
                                      },
                                    ],
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "cursor",
                                    "storageKey": null,
                                  },
                                ],
                                "storageKey": null,
                              },
                              Object {
                                "alias": null,
                                "args": null,
                                "concreteType": "PageInfo",
                                "kind": "LinkedField",
                                "name": "pageInfo",
                                "plural": false,
                                "selections": Array [
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "hasNextPage",
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "endCursor",
                                    "storageKey": null,
                                  },
                                ],
                                "storageKey": null,
                              },
                            ],
                            "storageKey": null,
                          },
                          Object {
                            "args": null,
                            "kind": "FragmentSpread",
                            "name": "InvestCompositionRelay_bucket",
                          },
                          Object {
                            "args": null,
                            "kind": "FragmentSpread",
                            "name": "InvestPanelRelay_bucket",
                          },
                        ],
                        "type": "GInvestmentBucket",
                      },
                      "seenRecords": Object {
                        "1": undefined,
                      },
                      "variables": Object {
                        "first": 2,
                      },
                    },
                  },
                },
                "_updatedRecordIDs": Object {},
              },
              "configName": undefined,
              "unstable_internal": Object {
                "areEqualSelectors": [Function],
                "createFragmentSpecResolver": [Function],
                "createOperationSelector": [Function],
                "getDataIDsFromObject": [Function],
                "getFragment": [Function],
                "getOperation": [Function],
                "getSelector": [Function],
                "getSelectorList": [Function],
                "getSelectorsFromObject": [Function],
                "getVariablesFromObject": [Function],
              },
            },
            "refetch": [Function],
          }
        }
      >
        <div>
          <withStyles(Dialog)
            onRequestClose={[Function]}
            open={false}
          >
            <Dialog
              classes={
                Object {
                  ".MuiDialog-paper-2:focus": "MuiDialog-paper-2:focus",
                  "fullScreen": "MuiDialog-fullScreen-7",
                  "fullWidth": "MuiDialog-fullWidth-6",
                  "paper": "MuiDialog-paper-2",
                  "paperWidthMd": "MuiDialog-paperWidthMd-5",
                  "paperWidthSm": "MuiDialog-paperWidthSm-4",
                  "paperWidthXs": "MuiDialog-paperWidthXs-3",
                  "root": "MuiDialog-root-1",
                }
              }
              fullScreen={false}
              fullWidth={false}
              ignoreBackdropClick={false}
              ignoreEscapeKeyUp={false}
              maxWidth="sm"
              onRequestClose={[Function]}
              open={false}
              transition={[Function]}
              transitionDuration={
                Object {
                  "enter": 225,
                  "exit": 195,
                }
              }
            >
              <withStyles(Modal)
                backdropTransitionDuration={
                  Object {
                    "enter": 225,
                    "exit": 195,
                  }
                }
                className="MuiDialog-root-1"
                ignoreBackdropClick={false}
                ignoreEscapeKeyUp={false}
                onRequestClose={[Function]}
                show={false}
              >
                <Modal
                  backdropComponent={[Function]}
                  backdropInvisible={false}
                  backdropTransitionDuration={
                    Object {
                      "enter": 225,
                      "exit": 195,
                    }
                  }
                  className="MuiDialog-root-1"
                  classes={
                    Object {
                      "hidden": "MuiModal-hidden-9",
                      "root": "MuiModal-root-8",
                    }
                  }
                  disableBackdrop={false}
                  ignoreBackdropClick={false}
                  ignoreEscapeKeyUp={false}
                  keepMounted={false}
                  modalManager={
                    Object {
                      "add": [Function],
                      "isTopModal": [Function],
                      "remove": [Function],
                    }
                  }
                  onRequestClose={[Function]}
                  show={false}
                />
              </withStyles(Modal)>
            </Dialog>
          </withStyles(Dialog)>
          <InvestBucket
            attributes={
              Object {
                "bad": Array [
                  Object {
                    "editMode": false,
                    "icon": Object {
                      "onClick": [Function],
                    },
                    "id": "3",
                    "isGood": false,
                    "shortDesc": "my bad text",
                    "text": Object {
                      "onClick": [Function],
                    },
                  },
                ],
                "good": Array [
                  Object {
                    "editMode": false,
                    "icon": Object {
                      "onClick": [Function],
                    },
                    "id": "2",
                    "isGood": true,
                    "shortDesc": "my text",
                    "text": Object {
                      "onClick": [Function],
                    },
                  },
                ],
              }
            }
            deleteFunc={[Function]}
            editCompositionFunc={[Function]}
            editFunc={[Function]}
            investFunc={[Function]}
            seeMoreFunc={null}
            title={
              <div>
                Bucket name
                <pure(Lock) />
              </div>
            }
          >
            <Card
              raised={false}
            >
              <withStyles(Paper)
                elevation={2}
              >
                <Paper
                  classes={
                    Object {
                      "root": "MuiPaper-root-10",
                      "rounded": "MuiPaper-rounded-11",
                      "shadow0": "MuiPaper-shadow0-12",
                      "shadow1": "MuiPaper-shadow1-13",
                      "shadow10": "MuiPaper-shadow10-22",
                      "shadow11": "MuiPaper-shadow11-23",
                      "shadow12": "MuiPaper-shadow12-24",
                      "shadow13": "MuiPaper-shadow13-25",
                      "shadow14": "MuiPaper-shadow14-26",
                      "shadow15": "MuiPaper-shadow15-27",
                      "shadow16": "MuiPaper-shadow16-28",
                      "shadow17": "MuiPaper-shadow17-29",
                      "shadow18": "MuiPaper-shadow18-30",
                      "shadow19": "MuiPaper-shadow19-31",
                      "shadow2": "MuiPaper-shadow2-14",
                      "shadow20": "MuiPaper-shadow20-32",
                      "shadow21": "MuiPaper-shadow21-33",
                      "shadow22": "MuiPaper-shadow22-34",
                      "shadow23": "MuiPaper-shadow23-35",
                      "shadow24": "MuiPaper-shadow24-36",
                      "shadow3": "MuiPaper-shadow3-15",
                      "shadow4": "MuiPaper-shadow4-16",
                      "shadow5": "MuiPaper-shadow5-17",
                      "shadow6": "MuiPaper-shadow6-18",
                      "shadow7": "MuiPaper-shadow7-19",
                      "shadow8": "MuiPaper-shadow8-20",
                      "shadow9": "MuiPaper-shadow9-21",
                    }
                  }
                  component="div"
                  elevation={2}
                  square={false}
                >
                  <div
                    className="MuiPaper-root-10 MuiPaper-shadow2-14 MuiPaper-rounded-11"
                  >
                    <withStyles(CardHeader)
                      title={
                        <div>
                          Bucket name
                          <pure(Lock) />
                        </div>
                      }
                    >
                      <CardHeader
                        classes={
                          Object {
                            "avatar": "MuiCardHeader-avatar-38",
                            "content": "MuiCardHeader-content-39",
                            "root": "MuiCardHeader-root-37",
                            "subheader": "MuiCardHeader-subheader-41",
                            "title": "MuiCardHeader-title-40",
                          }
                        }
                        title={
                          <div>
                            Bucket name
                            <pure(Lock) />
                          </div>
                        }
                      >
                        <withStyles(CardContent)
                          className="MuiCardHeader-root-37"
                        >
                          <CardContent
                            className="MuiCardHeader-root-37"
                            classes={
                              Object {
                                ".MuiCardContent-root-42:last-child": "MuiCardContent-root-42:last-child",
                                "root": "MuiCardContent-root-42",
                              }
                            }
                          >
                            <div
                              className="MuiCardContent-root-42 MuiCardHeader-root-37"
                            >
                              <div
                                className="MuiCardHeader-content-39"
                              >
                                <withStyles(Typography)
                                  className="MuiCardHeader-title-40"
                                  component="span"
                                  type="headline"
                                >
                                  <Typography
                                    align="inherit"
                                    className="MuiCardHeader-title-40"
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter-56",
                                        "alignJustify": "MuiTypography-alignJustify-58",
                                        "alignLeft": "MuiTypography-alignLeft-55",
                                        "alignRight": "MuiTypography-alignRight-57",
                                        "body1": "MuiTypography-body1-52",
                                        "body2": "MuiTypography-body2-51",
                                        "button": "MuiTypography-button-54",
                                        "caption": "MuiTypography-caption-53",
                                        "colorAccent": "MuiTypography-colorAccent-65",
                                        "colorError": "MuiTypography-colorError-66",
                                        "colorInherit": "MuiTypography-colorInherit-62",
                                        "colorPrimary": "MuiTypography-colorPrimary-63",
                                        "colorSecondary": "MuiTypography-colorSecondary-64",
                                        "display1": "MuiTypography-display1-47",
                                        "display2": "MuiTypography-display2-46",
                                        "display3": "MuiTypography-display3-45",
                                        "display4": "MuiTypography-display4-44",
                                        "gutterBottom": "MuiTypography-gutterBottom-60",
                                        "headline": "MuiTypography-headline-48",
                                        "noWrap": "MuiTypography-noWrap-59",
                                        "paragraph": "MuiTypography-paragraph-61",
                                        "root": "MuiTypography-root-43",
                                        "subheading": "MuiTypography-subheading-50",
                                        "title": "MuiTypography-title-49",
                                      }
                                    }
                                    color="default"
                                    component="span"
                                    gutterBottom={false}
                                    headlineMapping={
                                      Object {
                                        "body1": "p",
                                        "body2": "aside",
                                        "display1": "h1",
                                        "display2": "h1",
                                        "display3": "h1",
                                        "display4": "h1",
                                        "headline": "h1",
                                        "subheading": "h3",
                                        "title": "h2",
                                      }
                                    }
                                    noWrap={false}
                                    paragraph={false}
                                    type="headline"
                                  >
                                    <span
                                      className="MuiTypography-root-43 MuiTypography-headline-48 MuiCardHeader-title-40"
                                    >
                                      <div>
                                        Bucket name
                                        <pure(Lock)>
                                          <Lock>
                                            <withStyles(SvgIcon)>
                                              <SvgIcon
                                                classes={
                                                  Object {
                                                    "root": "MuiSvgIcon-root-96",
                                                  }
                                                }
                                                viewBox="0 0 24 24"
                                              >
                                                <svg
                                                  aria-hidden="true"
                                                  className="MuiSvgIcon-root-96"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"
                                                  />
                                                </svg>
                                              </SvgIcon>
                                            </withStyles(SvgIcon)>
                                          </Lock>
                                        </pure(Lock)>
                                      </div>
                                    </span>
                                  </Typography>
                                </withStyles(Typography)>
                                <withStyles(Typography)
                                  className="MuiCardHeader-subheader-41"
                                  color="secondary"
                                  component="span"
                                  type="body1"
                                >
                                  <Typography
                                    align="inherit"
                                    className="MuiCardHeader-subheader-41"
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter-56",
                                        "alignJustify": "MuiTypography-alignJustify-58",
                                        "alignLeft": "MuiTypography-alignLeft-55",
                                        "alignRight": "MuiTypography-alignRight-57",
                                        "body1": "MuiTypography-body1-52",
                                        "body2": "MuiTypography-body2-51",
                                        "button": "MuiTypography-button-54",
                                        "caption": "MuiTypography-caption-53",
                                        "colorAccent": "MuiTypography-colorAccent-65",
                                        "colorError": "MuiTypography-colorError-66",
                                        "colorInherit": "MuiTypography-colorInherit-62",
                                        "colorPrimary": "MuiTypography-colorPrimary-63",
                                        "colorSecondary": "MuiTypography-colorSecondary-64",
                                        "display1": "MuiTypography-display1-47",
                                        "display2": "MuiTypography-display2-46",
                                        "display3": "MuiTypography-display3-45",
                                        "display4": "MuiTypography-display4-44",
                                        "gutterBottom": "MuiTypography-gutterBottom-60",
                                        "headline": "MuiTypography-headline-48",
                                        "noWrap": "MuiTypography-noWrap-59",
                                        "paragraph": "MuiTypography-paragraph-61",
                                        "root": "MuiTypography-root-43",
                                        "subheading": "MuiTypography-subheading-50",
                                        "title": "MuiTypography-title-49",
                                      }
                                    }
                                    color="secondary"
                                    component="span"
                                    gutterBottom={false}
                                    headlineMapping={
                                      Object {
                                        "body1": "p",
                                        "body2": "aside",
                                        "display1": "h1",
                                        "display2": "h1",
                                        "display3": "h1",
                                        "display4": "h1",
                                        "headline": "h1",
                                        "subheading": "h3",
                                        "title": "h2",
                                      }
                                    }
                                    noWrap={false}
                                    paragraph={false}
                                    type="body1"
                                  >
                                    <span
                                      className="MuiTypography-root-43 MuiTypography-body1-52 MuiTypography-colorSecondary-64 MuiCardHeader-subheader-41"
                                    />
                                  </Typography>
                                </withStyles(Typography)>
                              </div>
                            </div>
                          </CardContent>
                        </withStyles(CardContent)>
                      </CardHeader>
                    </withStyles(CardHeader)>
                    <withStyles(CardContent)>
                      <CardContent
                        classes={
                          Object {
                            ".MuiCardContent-root-42:last-child": "MuiCardContent-root-42:last-child",
                            "root": "MuiCardContent-root-42",
                          }
                        }
                      >
                        <div
                          className="MuiCardContent-root-42"
                        >
                          <withStyles(List)>
                            <List
                              classes={
                                Object {
                                  "dense": "MuiList-dense-69",
                                  "padding": "MuiList-padding-68",
                                  "root": "MuiList-root-67",
                                  "subheader": "MuiList-subheader-70",
                                }
                              }
                              component="ul"
                              dense={false}
                              disablePadding={false}
                            >
                              <ul
                                className="MuiList-root-67 MuiList-padding-68"
                              >
                                <withStyles(ListItem)
                                  key="2"
                                >
                                  <ListItem
                                    button={false}
                                    classes={
                                      Object {
                                        ".MuiListItem-button-105:hover": "MuiListItem-button-105:hover",
                                        ".MuiListItem-button-105:hover.MuiListItem-disabled-102": "MuiListItem-button-105:hover.MuiListItem-disabled-102",
                                        "button": "MuiListItem-button-105",
                                        "container": "MuiListItem-container-98",
                                        "default": "MuiListItem-default-100",
                                        "dense": "MuiListItem-dense-101",
                                        "disabled": "MuiListItem-disabled-102",
                                        "divider": "MuiListItem-divider-103",
                                        "gutters": "MuiListItem-gutters-104",
                                        "keyboardFocused": "MuiListItem-keyboardFocused-99",
                                        "root": "MuiListItem-root-97",
                                        "secondaryAction": "MuiListItem-secondaryAction-106",
                                      }
                                    }
                                    component="li"
                                    dense={false}
                                    disableGutters={false}
                                    disabled={false}
                                    divider={false}
                                  >
                                    <li
                                      className="MuiListItem-root-97 MuiListItem-gutters-104 MuiListItem-default-100"
                                      disabled={false}
                                    >
                                      <withStyles(ListItemIcon)
                                        key=".0"
                                        onClick={[Function]}
                                      >
                                        <ListItemIcon
                                          classes={
                                            Object {
                                              "root": "MuiListItemIcon-root-107",
                                            }
                                          }
                                          onClick={[Function]}
                                        >
                                          <pure(TrendingUp)
                                            className="MuiListItemIcon-root-107"
                                            onClick={[Function]}
                                          >
                                            <TrendingUp
                                              className="MuiListItemIcon-root-107"
                                              onClick={[Function]}
                                            >
                                              <withStyles(SvgIcon)
                                                className="MuiListItemIcon-root-107"
                                                onClick={[Function]}
                                              >
                                                <SvgIcon
                                                  className="MuiListItemIcon-root-107"
                                                  classes={
                                                    Object {
                                                      "root": "MuiSvgIcon-root-96",
                                                    }
                                                  }
                                                  onClick={[Function]}
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-96 MuiListItemIcon-root-107"
                                                    focusable="false"
                                                    onClick={[Function]}
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </withStyles(SvgIcon)>
                                            </TrendingUp>
                                          </pure(TrendingUp)>
                                        </ListItemIcon>
                                      </withStyles(ListItemIcon)>
                                      <withStyles(ListItemText)
                                        autoFocus={true}
                                        key=".$2"
                                        onClick={[Function]}
                                        primary="my text"
                                      >
                                        <ListItemText
                                          autoFocus={true}
                                          classes={
                                            Object {
                                              ".MuiListItemText-inset-109:first-child": "MuiListItemText-inset-109:first-child",
                                              ".MuiListItemText-root-108:first-child": "MuiListItemText-root-108:first-child",
                                              "dense": "MuiListItemText-dense-110",
                                              "inset": "MuiListItemText-inset-109",
                                              "root": "MuiListItemText-root-108",
                                              "text": "MuiListItemText-text-111",
                                              "textDense": "MuiListItemText-textDense-112",
                                            }
                                          }
                                          disableTypography={false}
                                          inset={false}
                                          onClick={[Function]}
                                          primary="my text"
                                          secondary={false}
                                        >
                                          <div
                                            autoFocus={true}
                                            className="MuiListItemText-root-108"
                                            onClick={[Function]}
                                          >
                                            <withStyles(Typography)
                                              className="MuiListItemText-text-111"
                                              type="subheading"
                                            >
                                              <Typography
                                                align="inherit"
                                                className="MuiListItemText-text-111"
                                                classes={
                                                  Object {
                                                    "alignCenter": "MuiTypography-alignCenter-56",
                                                    "alignJustify": "MuiTypography-alignJustify-58",
                                                    "alignLeft": "MuiTypography-alignLeft-55",
                                                    "alignRight": "MuiTypography-alignRight-57",
                                                    "body1": "MuiTypography-body1-52",
                                                    "body2": "MuiTypography-body2-51",
                                                    "button": "MuiTypography-button-54",
                                                    "caption": "MuiTypography-caption-53",
                                                    "colorAccent": "MuiTypography-colorAccent-65",
                                                    "colorError": "MuiTypography-colorError-66",
                                                    "colorInherit": "MuiTypography-colorInherit-62",
                                                    "colorPrimary": "MuiTypography-colorPrimary-63",
                                                    "colorSecondary": "MuiTypography-colorSecondary-64",
                                                    "display1": "MuiTypography-display1-47",
                                                    "display2": "MuiTypography-display2-46",
                                                    "display3": "MuiTypography-display3-45",
                                                    "display4": "MuiTypography-display4-44",
                                                    "gutterBottom": "MuiTypography-gutterBottom-60",
                                                    "headline": "MuiTypography-headline-48",
                                                    "noWrap": "MuiTypography-noWrap-59",
                                                    "paragraph": "MuiTypography-paragraph-61",
                                                    "root": "MuiTypography-root-43",
                                                    "subheading": "MuiTypography-subheading-50",
                                                    "title": "MuiTypography-title-49",
                                                  }
                                                }
                                                color="default"
                                                gutterBottom={false}
                                                headlineMapping={
                                                  Object {
                                                    "body1": "p",
                                                    "body2": "aside",
                                                    "display1": "h1",
                                                    "display2": "h1",
                                                    "display3": "h1",
                                                    "display4": "h1",
                                                    "headline": "h1",
                                                    "subheading": "h3",
                                                    "title": "h2",
                                                  }
                                                }
                                                noWrap={false}
                                                paragraph={false}
                                                type="subheading"
                                              >
                                                <h3
                                                  className="MuiTypography-root-43 MuiTypography-subheading-50 MuiListItemText-text-111"
                                                >
                                                  my text
                                                </h3>
                                              </Typography>
                                            </withStyles(Typography)>
                                          </div>
                                        </ListItemText>
                                      </withStyles(ListItemText)>
                                    </li>
                                  </ListItem>
                                </withStyles(ListItem)>
                                <withStyles(ListItem)
                                  key="3"
                                >
                                  <ListItem
                                    button={false}
                                    classes={
                                      Object {
                                        ".MuiListItem-button-105:hover": "MuiListItem-button-105:hover",
                                        ".MuiListItem-button-105:hover.MuiListItem-disabled-102": "MuiListItem-button-105:hover.MuiListItem-disabled-102",
                                        "button": "MuiListItem-button-105",
                                        "container": "MuiListItem-container-98",
                                        "default": "MuiListItem-default-100",
                                        "dense": "MuiListItem-dense-101",
                                        "disabled": "MuiListItem-disabled-102",
                                        "divider": "MuiListItem-divider-103",
                                        "gutters": "MuiListItem-gutters-104",
                                        "keyboardFocused": "MuiListItem-keyboardFocused-99",
                                        "root": "MuiListItem-root-97",
                                        "secondaryAction": "MuiListItem-secondaryAction-106",
                                      }
                                    }
                                    component="li"
                                    dense={false}
                                    disableGutters={false}
                                    disabled={false}
                                    divider={false}
                                  >
                                    <li
                                      className="MuiListItem-root-97 MuiListItem-gutters-104 MuiListItem-default-100"
                                      disabled={false}
                                    >
                                      <withStyles(ListItemIcon)
                                        key=".0"
                                        onClick={[Function]}
                                      >
                                        <ListItemIcon
                                          classes={
                                            Object {
                                              "root": "MuiListItemIcon-root-107",
                                            }
                                          }
                                          onClick={[Function]}
                                        >
                                          <pure(TrendingDown)
                                            className="MuiListItemIcon-root-107"
                                            onClick={[Function]}
                                          >
                                            <TrendingDown
                                              className="MuiListItemIcon-root-107"
                                              onClick={[Function]}
                                            >
                                              <withStyles(SvgIcon)
                                                className="MuiListItemIcon-root-107"
                                                onClick={[Function]}
                                              >
                                                <SvgIcon
                                                  className="MuiListItemIcon-root-107"
                                                  classes={
                                                    Object {
                                                      "root": "MuiSvgIcon-root-96",
                                                    }
                                                  }
                                                  onClick={[Function]}
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-96 MuiListItemIcon-root-107"
                                                    focusable="false"
                                                    onClick={[Function]}
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M16 18l2.29-2.29-4.88-4.88-4 4L2 7.41 3.41 6l6 6 4-4 6.3 6.29L22 12v6z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </withStyles(SvgIcon)>
                                            </TrendingDown>
                                          </pure(TrendingDown)>
                                        </ListItemIcon>
                                      </withStyles(ListItemIcon)>
                                      <withStyles(ListItemText)
                                        autoFocus={true}
                                        key=".$3"
                                        onClick={[Function]}
                                        primary="my bad text"
                                      >
                                        <ListItemText
                                          autoFocus={true}
                                          classes={
                                            Object {
                                              ".MuiListItemText-inset-109:first-child": "MuiListItemText-inset-109:first-child",
                                              ".MuiListItemText-root-108:first-child": "MuiListItemText-root-108:first-child",
                                              "dense": "MuiListItemText-dense-110",
                                              "inset": "MuiListItemText-inset-109",
                                              "root": "MuiListItemText-root-108",
                                              "text": "MuiListItemText-text-111",
                                              "textDense": "MuiListItemText-textDense-112",
                                            }
                                          }
                                          disableTypography={false}
                                          inset={false}
                                          onClick={[Function]}
                                          primary="my bad text"
                                          secondary={false}
                                        >
                                          <div
                                            autoFocus={true}
                                            className="MuiListItemText-root-108"
                                            onClick={[Function]}
                                          >
                                            <withStyles(Typography)
                                              className="MuiListItemText-text-111"
                                              type="subheading"
                                            >
                                              <Typography
                                                align="inherit"
                                                className="MuiListItemText-text-111"
                                                classes={
                                                  Object {
                                                    "alignCenter": "MuiTypography-alignCenter-56",
                                                    "alignJustify": "MuiTypography-alignJustify-58",
                                                    "alignLeft": "MuiTypography-alignLeft-55",
                                                    "alignRight": "MuiTypography-alignRight-57",
                                                    "body1": "MuiTypography-body1-52",
                                                    "body2": "MuiTypography-body2-51",
                                                    "button": "MuiTypography-button-54",
                                                    "caption": "MuiTypography-caption-53",
                                                    "colorAccent": "MuiTypography-colorAccent-65",
                                                    "colorError": "MuiTypography-colorError-66",
                                                    "colorInherit": "MuiTypography-colorInherit-62",
                                                    "colorPrimary": "MuiTypography-colorPrimary-63",
                                                    "colorSecondary": "MuiTypography-colorSecondary-64",
                                                    "display1": "MuiTypography-display1-47",
                                                    "display2": "MuiTypography-display2-46",
                                                    "display3": "MuiTypography-display3-45",
                                                    "display4": "MuiTypography-display4-44",
                                                    "gutterBottom": "MuiTypography-gutterBottom-60",
                                                    "headline": "MuiTypography-headline-48",
                                                    "noWrap": "MuiTypography-noWrap-59",
                                                    "paragraph": "MuiTypography-paragraph-61",
                                                    "root": "MuiTypography-root-43",
                                                    "subheading": "MuiTypography-subheading-50",
                                                    "title": "MuiTypography-title-49",
                                                  }
                                                }
                                                color="default"
                                                gutterBottom={false}
                                                headlineMapping={
                                                  Object {
                                                    "body1": "p",
                                                    "body2": "aside",
                                                    "display1": "h1",
                                                    "display2": "h1",
                                                    "display3": "h1",
                                                    "display4": "h1",
                                                    "headline": "h1",
                                                    "subheading": "h3",
                                                    "title": "h2",
                                                  }
                                                }
                                                noWrap={false}
                                                paragraph={false}
                                                type="subheading"
                                              >
                                                <h3
                                                  className="MuiTypography-root-43 MuiTypography-subheading-50 MuiListItemText-text-111"
                                                >
                                                  my bad text
                                                </h3>
                                              </Typography>
                                            </withStyles(Typography)>
                                          </div>
                                        </ListItemText>
                                      </withStyles(ListItemText)>
                                    </li>
                                  </ListItem>
                                </withStyles(ListItem)>
                              </ul>
                            </List>
                          </withStyles(List)>
                          <withStyles(Button)
                            aria-label="add"
                            color="primary"
                            fab={true}
                            id="launch-edit"
                            onClick={[Function]}
                          >
                            <Button
                              aria-label="add"
                              classes={
                                Object {
                                  ".MuiButton-fab-86:active": "MuiButton-fab-86:active",
                                  ".MuiButton-flatAccent-77:hover": "MuiButton-flatAccent-77:hover",
                                  ".MuiButton-flatContrast-78:hover": "MuiButton-flatContrast-78:hover",
                                  ".MuiButton-flatPrimary-76:hover": "MuiButton-flatPrimary-76:hover",
                                  ".MuiButton-raised-80.MuiButton-disabled-85": "MuiButton-raised-80.MuiButton-disabled-85",
                                  ".MuiButton-raised-80.MuiButton-keyboardFocused-81": "MuiButton-raised-80.MuiButton-keyboardFocused-81",
                                  ".MuiButton-raised-80:active": "MuiButton-raised-80:active",
                                  ".MuiButton-raised-80:hover": "MuiButton-raised-80:hover",
                                  ".MuiButton-raised-80:hover.MuiButton-disabled-85": "MuiButton-raised-80:hover.MuiButton-disabled-85",
                                  ".MuiButton-raisedAccent-83:hover": "MuiButton-raisedAccent-83:hover",
                                  ".MuiButton-raisedPrimary-82:hover": "MuiButton-raisedPrimary-82:hover",
                                  ".MuiButton-root-73:hover": "MuiButton-root-73:hover",
                                  ".MuiButton-root-73:hover.MuiButton-disabled-85": "MuiButton-root-73:hover.MuiButton-disabled-85",
                                  "colorInherit": "MuiButton-colorInherit-79",
                                  "dense": "MuiButton-dense-74",
                                  "disabled": "MuiButton-disabled-85",
                                  "fab": "MuiButton-fab-86",
                                  "flatAccent": "MuiButton-flatAccent-77",
                                  "flatContrast": "MuiButton-flatContrast-78",
                                  "flatPrimary": "MuiButton-flatPrimary-76",
                                  "keyboardFocused": "MuiButton-keyboardFocused-81",
                                  "label": "MuiButton-label-75",
                                  "raised": "MuiButton-raised-80",
                                  "raisedAccent": "MuiButton-raisedAccent-83",
                                  "raisedContrast": "MuiButton-raisedContrast-84",
                                  "raisedPrimary": "MuiButton-raisedPrimary-82",
                                  "root": "MuiButton-root-73",
                                }
                              }
                              color="primary"
                              dense={false}
                              disableFocusRipple={false}
                              disableRipple={false}
                              disabled={false}
                              fab={true}
                              id="launch-edit"
                              onClick={[Function]}
                              raised={false}
                              type="button"
                            >
                              <withStyles(ButtonBase)
                                aria-label="add"
                                className="MuiButton-root-73 MuiButton-raised-80 MuiButton-fab-86 MuiButton-raisedPrimary-82"
                                disableRipple={false}
                                disabled={false}
                                focusRipple={true}
                                id="launch-edit"
                                keyboardFocusedClassName="MuiButton-keyboardFocused-81"
                                onClick={[Function]}
                                type="button"
                              >
                                <ButtonBase
                                  aria-label="add"
                                  centerRipple={false}
                                  className="MuiButton-root-73 MuiButton-raised-80 MuiButton-fab-86 MuiButton-raisedPrimary-82"
                                  classes={
                                    Object {
                                      "disabled": "MuiButtonBase-disabled-88",
                                      "root": "MuiButtonBase-root-87",
                                    }
                                  }
                                  disableRipple={false}
                                  disabled={false}
                                  focusRipple={true}
                                  id="launch-edit"
                                  keyboardFocusedClassName="MuiButton-keyboardFocused-81"
                                  onClick={[Function]}
                                  tabIndex={0}
                                  type="button"
                                >
                                  <button
                                    aria-label="add"
                                    className="MuiButtonBase-root-87 MuiButton-root-73 MuiButton-raised-80 MuiButton-fab-86 MuiButton-raisedPrimary-82"
                                    disabled={false}
                                    id="launch-edit"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchStart={[Function]}
                                    role="button"
                                    tabIndex={0}
                                    type="button"
                                  >
                                    <span
                                      className="MuiButton-label-75"
                                    >
                                      <pure(Add)>
                                        <Add>
                                          <withStyles(SvgIcon)>
                                            <SvgIcon
                                              classes={
                                                Object {
                                                  "root": "MuiSvgIcon-root-96",
                                                }
                                              }
                                              viewBox="0 0 24 24"
                                            >
                                              <svg
                                                aria-hidden="true"
                                                className="MuiSvgIcon-root-96"
                                                focusable="false"
                                                viewBox="0 0 24 24"
                                              >
                                                <path
                                                  d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
                                                />
                                              </svg>
                                            </SvgIcon>
                                          </withStyles(SvgIcon)>
                                        </Add>
                                      </pure(Add)>
                                    </span>
                                    <withStyles(TouchRipple)
                                      center={false}
                                      innerRef={[Function]}
                                    >
                                      <TouchRipple
                                        center={false}
                                        classes={
                                          Object {
                                            "0%": "%",
                                            "100%": "00%",
                                            "50%": "0%",
                                            "ripple": "MuiTouchRipple-ripple-93",
                                            "rippleFast": "MuiTouchRipple-rippleFast-95",
                                            "rippleVisible": "MuiTouchRipple-rippleVisible-94",
                                            "root": "MuiTouchRipple-root-89",
                                            "wrapper": "MuiTouchRipple-wrapper-90",
                                            "wrapperLeaving": "MuiTouchRipple-wrapperLeaving-91",
                                            "wrapperPulsating": "MuiTouchRipple-wrapperPulsating-92",
                                          }
                                        }
                                      >
                                        <TransitionGroup
                                          childFactory={[Function]}
                                          className="MuiTouchRipple-root-89"
                                          component="span"
                                          enter={true}
                                          exit={true}
                                        >
                                          <span
                                            className="MuiTouchRipple-root-89"
                                          />
                                        </TransitionGroup>
                                      </TouchRipple>
                                    </withStyles(TouchRipple)>
                                  </button>
                                </ButtonBase>
                              </withStyles(ButtonBase)>
                            </Button>
                          </withStyles(Button)>
                        </div>
                      </CardContent>
                    </withStyles(CardContent)>
                    <withStyles(CardActions)>
                      <CardActions
                        classes={
                          Object {
                            "actionSpacing": "MuiCardActions-actionSpacing-72",
                            "root": "MuiCardActions-root-71",
                          }
                        }
                        disableActionSpacing={false}
                      >
                        <div
                          className="MuiCardActions-root-71"
                        >
                          <withStyles(Button)
                            className="MuiCardActions-actionSpacing-72"
                            color="primary"
                            dense={true}
                            key=".0"
                            onClick={[Function]}
                          >
                            <Button
                              className="MuiCardActions-actionSpacing-72"
                              classes={
                                Object {
                                  ".MuiButton-fab-86:active": "MuiButton-fab-86:active",
                                  ".MuiButton-flatAccent-77:hover": "MuiButton-flatAccent-77:hover",
                                  ".MuiButton-flatContrast-78:hover": "MuiButton-flatContrast-78:hover",
                                  ".MuiButton-flatPrimary-76:hover": "MuiButton-flatPrimary-76:hover",
                                  ".MuiButton-raised-80.MuiButton-disabled-85": "MuiButton-raised-80.MuiButton-disabled-85",
                                  ".MuiButton-raised-80.MuiButton-keyboardFocused-81": "MuiButton-raised-80.MuiButton-keyboardFocused-81",
                                  ".MuiButton-raised-80:active": "MuiButton-raised-80:active",
                                  ".MuiButton-raised-80:hover": "MuiButton-raised-80:hover",
                                  ".MuiButton-raised-80:hover.MuiButton-disabled-85": "MuiButton-raised-80:hover.MuiButton-disabled-85",
                                  ".MuiButton-raisedAccent-83:hover": "MuiButton-raisedAccent-83:hover",
                                  ".MuiButton-raisedPrimary-82:hover": "MuiButton-raisedPrimary-82:hover",
                                  ".MuiButton-root-73:hover": "MuiButton-root-73:hover",
                                  ".MuiButton-root-73:hover.MuiButton-disabled-85": "MuiButton-root-73:hover.MuiButton-disabled-85",
                                  "colorInherit": "MuiButton-colorInherit-79",
                                  "dense": "MuiButton-dense-74",
                                  "disabled": "MuiButton-disabled-85",
                                  "fab": "MuiButton-fab-86",
                                  "flatAccent": "MuiButton-flatAccent-77",
                                  "flatContrast": "MuiButton-flatContrast-78",
                                  "flatPrimary": "MuiButton-flatPrimary-76",
                                  "keyboardFocused": "MuiButton-keyboardFocused-81",
                                  "label": "MuiButton-label-75",
                                  "raised": "MuiButton-raised-80",
                                  "raisedAccent": "MuiButton-raisedAccent-83",
                                  "raisedContrast": "MuiButton-raisedContrast-84",
                                  "raisedPrimary": "MuiButton-raisedPrimary-82",
                                  "root": "MuiButton-root-73",
                                }
                              }
                              color="primary"
                              dense={true}
                              disableFocusRipple={false}
                              disableRipple={false}
                              disabled={false}
                              fab={false}
                              onClick={[Function]}
                              raised={false}
                              type="button"
                            >
                              <withStyles(ButtonBase)
                                className="MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                disableRipple={false}
                                disabled={false}
                                focusRipple={true}
                                keyboardFocusedClassName="MuiButton-keyboardFocused-81"
                                onClick={[Function]}
                                type="button"
                              >
                                <ButtonBase
                                  centerRipple={false}
                                  className="MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                  classes={
                                    Object {
                                      "disabled": "MuiButtonBase-disabled-88",
                                      "root": "MuiButtonBase-root-87",
                                    }
                                  }
                                  disableRipple={false}
                                  disabled={false}
                                  focusRipple={true}
                                  keyboardFocusedClassName="MuiButton-keyboardFocused-81"
                                  onClick={[Function]}
                                  tabIndex={0}
                                  type="button"
                                >
                                  <button
                                    className="MuiButtonBase-root-87 MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                    disabled={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchStart={[Function]}
                                    role="button"
                                    tabIndex={0}
                                    type="button"
                                  >
                                    <span
                                      className="MuiButton-label-75"
                                    >
                                      Invest
                                    </span>
                                    <withStyles(TouchRipple)
                                      center={false}
                                      innerRef={[Function]}
                                    >
                                      <TouchRipple
                                        center={false}
                                        classes={
                                          Object {
                                            "0%": "%",
                                            "100%": "00%",
                                            "50%": "0%",
                                            "ripple": "MuiTouchRipple-ripple-93",
                                            "rippleFast": "MuiTouchRipple-rippleFast-95",
                                            "rippleVisible": "MuiTouchRipple-rippleVisible-94",
                                            "root": "MuiTouchRipple-root-89",
                                            "wrapper": "MuiTouchRipple-wrapper-90",
                                            "wrapperLeaving": "MuiTouchRipple-wrapperLeaving-91",
                                            "wrapperPulsating": "MuiTouchRipple-wrapperPulsating-92",
                                          }
                                        }
                                      >
                                        <TransitionGroup
                                          childFactory={[Function]}
                                          className="MuiTouchRipple-root-89"
                                          component="span"
                                          enter={true}
                                          exit={true}
                                        >
                                          <span
                                            className="MuiTouchRipple-root-89"
                                          />
                                        </TransitionGroup>
                                      </TouchRipple>
                                    </withStyles(TouchRipple)>
                                  </button>
                                </ButtonBase>
                              </withStyles(ButtonBase)>
                            </Button>
                          </withStyles(Button)>
                          <withStyles(Button)
                            className="MuiCardActions-actionSpacing-72"
                            color="primary"
                            dense={true}
                            id="delete"
                            key=".1"
                            onClick={[Function]}
                          >
                            <Button
                              className="MuiCardActions-actionSpacing-72"
                              classes={
                                Object {
                                  ".MuiButton-fab-86:active": "MuiButton-fab-86:active",
                                  ".MuiButton-flatAccent-77:hover": "MuiButton-flatAccent-77:hover",
                                  ".MuiButton-flatContrast-78:hover": "MuiButton-flatContrast-78:hover",
                                  ".MuiButton-flatPrimary-76:hover": "MuiButton-flatPrimary-76:hover",
                                  ".MuiButton-raised-80.MuiButton-disabled-85": "MuiButton-raised-80.MuiButton-disabled-85",
                                  ".MuiButton-raised-80.MuiButton-keyboardFocused-81": "MuiButton-raised-80.MuiButton-keyboardFocused-81",
                                  ".MuiButton-raised-80:active": "MuiButton-raised-80:active",
                                  ".MuiButton-raised-80:hover": "MuiButton-raised-80:hover",
                                  ".MuiButton-raised-80:hover.MuiButton-disabled-85": "MuiButton-raised-80:hover.MuiButton-disabled-85",
                                  ".MuiButton-raisedAccent-83:hover": "MuiButton-raisedAccent-83:hover",
                                  ".MuiButton-raisedPrimary-82:hover": "MuiButton-raisedPrimary-82:hover",
                                  ".MuiButton-root-73:hover": "MuiButton-root-73:hover",
                                  ".MuiButton-root-73:hover.MuiButton-disabled-85": "MuiButton-root-73:hover.MuiButton-disabled-85",
                                  "colorInherit": "MuiButton-colorInherit-79",
                                  "dense": "MuiButton-dense-74",
                                  "disabled": "MuiButton-disabled-85",
                                  "fab": "MuiButton-fab-86",
                                  "flatAccent": "MuiButton-flatAccent-77",
                                  "flatContrast": "MuiButton-flatContrast-78",
                                  "flatPrimary": "MuiButton-flatPrimary-76",
                                  "keyboardFocused": "MuiButton-keyboardFocused-81",
                                  "label": "MuiButton-label-75",
                                  "raised": "MuiButton-raised-80",
                                  "raisedAccent": "MuiButton-raisedAccent-83",
                                  "raisedContrast": "MuiButton-raisedContrast-84",
                                  "raisedPrimary": "MuiButton-raisedPrimary-82",
                                  "root": "MuiButton-root-73",
                                }
                              }
                              color="primary"
                              dense={true}
                              disableFocusRipple={false}
                              disableRipple={false}
                              disabled={false}
                              fab={false}
                              id="delete"
                              onClick={[Function]}
                              raised={false}
                              type="button"
                            >
                              <withStyles(ButtonBase)
                                className="MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                disableRipple={false}
                                disabled={false}
                                focusRipple={true}
                                id="delete"
                                keyboardFocusedClassName="MuiButton-keyboardFocused-81"
                                onClick={[Function]}
                                type="button"
                              >
                                <ButtonBase
                                  centerRipple={false}
                                  className="MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                  classes={
                                    Object {
                                      "disabled": "MuiButtonBase-disabled-88",
                                      "root": "MuiButtonBase-root-87",
                                    }
                                  }
                                  disableRipple={false}
                                  disabled={false}
                                  focusRipple={true}
                                  id="delete"
                                  keyboardFocusedClassName="MuiButton-keyboardFocused-81"
                                  onClick={[Function]}
                                  tabIndex={0}
                                  type="button"
                                >
                                  <button
                                    className="MuiButtonBase-root-87 MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                    disabled={false}
                                    id="delete"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchStart={[Function]}
                                    role="button"
                                    tabIndex={0}
                                    type="button"
                                  >
                                    <span
                                      className="MuiButton-label-75"
                                    >
                                      Delete
                                    </span>
                                    <withStyles(TouchRipple)
                                      center={false}
                                      innerRef={[Function]}
                                    >
                                      <TouchRipple
                                        center={false}
                                        classes={
                                          Object {
                                            "0%": "%",
                                            "100%": "00%",
                                            "50%": "0%",
                                            "ripple": "MuiTouchRipple-ripple-93",
                                            "rippleFast": "MuiTouchRipple-rippleFast-95",
                                            "rippleVisible": "MuiTouchRipple-rippleVisible-94",
                                            "root": "MuiTouchRipple-root-89",
                                            "wrapper": "MuiTouchRipple-wrapper-90",
                                            "wrapperLeaving": "MuiTouchRipple-wrapperLeaving-91",
                                            "wrapperPulsating": "MuiTouchRipple-wrapperPulsating-92",
                                          }
                                        }
                                      >
                                        <TransitionGroup
                                          childFactory={[Function]}
                                          className="MuiTouchRipple-root-89"
                                          component="span"
                                          enter={true}
                                          exit={true}
                                        >
                                          <span
                                            className="MuiTouchRipple-root-89"
                                          />
                                        </TransitionGroup>
                                      </TouchRipple>
                                    </withStyles(TouchRipple)>
                                  </button>
                                </ButtonBase>
                              </withStyles(ButtonBase)>
                            </Button>
                          </withStyles(Button)>
                          <withStyles(Button)
                            className="MuiCardActions-actionSpacing-72"
                            color="primary"
                            dense={true}
                            id="edit-comp"
                            key=".2"
                            onClick={[Function]}
                          >
                            <Button
                              className="MuiCardActions-actionSpacing-72"
                              classes={
                                Object {
                                  ".MuiButton-fab-86:active": "MuiButton-fab-86:active",
                                  ".MuiButton-flatAccent-77:hover": "MuiButton-flatAccent-77:hover",
                                  ".MuiButton-flatContrast-78:hover": "MuiButton-flatContrast-78:hover",
                                  ".MuiButton-flatPrimary-76:hover": "MuiButton-flatPrimary-76:hover",
                                  ".MuiButton-raised-80.MuiButton-disabled-85": "MuiButton-raised-80.MuiButton-disabled-85",
                                  ".MuiButton-raised-80.MuiButton-keyboardFocused-81": "MuiButton-raised-80.MuiButton-keyboardFocused-81",
                                  ".MuiButton-raised-80:active": "MuiButton-raised-80:active",
                                  ".MuiButton-raised-80:hover": "MuiButton-raised-80:hover",
                                  ".MuiButton-raised-80:hover.MuiButton-disabled-85": "MuiButton-raised-80:hover.MuiButton-disabled-85",
                                  ".MuiButton-raisedAccent-83:hover": "MuiButton-raisedAccent-83:hover",
                                  ".MuiButton-raisedPrimary-82:hover": "MuiButton-raisedPrimary-82:hover",
                                  ".MuiButton-root-73:hover": "MuiButton-root-73:hover",
                                  ".MuiButton-root-73:hover.MuiButton-disabled-85": "MuiButton-root-73:hover.MuiButton-disabled-85",
                                  "colorInherit": "MuiButton-colorInherit-79",
                                  "dense": "MuiButton-dense-74",
                                  "disabled": "MuiButton-disabled-85",
                                  "fab": "MuiButton-fab-86",
                                  "flatAccent": "MuiButton-flatAccent-77",
                                  "flatContrast": "MuiButton-flatContrast-78",
                                  "flatPrimary": "MuiButton-flatPrimary-76",
                                  "keyboardFocused": "MuiButton-keyboardFocused-81",
                                  "label": "MuiButton-label-75",
                                  "raised": "MuiButton-raised-80",
                                  "raisedAccent": "MuiButton-raisedAccent-83",
                                  "raisedContrast": "MuiButton-raisedContrast-84",
                                  "raisedPrimary": "MuiButton-raisedPrimary-82",
                                  "root": "MuiButton-root-73",
                                }
                              }
                              color="primary"
                              dense={true}
                              disableFocusRipple={false}
                              disableRipple={false}
                              disabled={false}
                              fab={false}
                              id="edit-comp"
                              onClick={[Function]}
                              raised={false}
                              type="button"
                            >
                              <withStyles(ButtonBase)
                                className="MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                disableRipple={false}
                                disabled={false}
                                focusRipple={true}
                                id="edit-comp"
                                keyboardFocusedClassName="MuiButton-keyboardFocused-81"
                                onClick={[Function]}
                                type="button"
                              >
                                <ButtonBase
                                  centerRipple={false}
                                  className="MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                  classes={
                                    Object {
                                      "disabled": "MuiButtonBase-disabled-88",
                                      "root": "MuiButtonBase-root-87",
                                    }
                                  }
                                  disableRipple={false}
                                  disabled={false}
                                  focusRipple={true}
                                  id="edit-comp"
                                  keyboardFocusedClassName="MuiButton-keyboardFocused-81"
                                  onClick={[Function]}
                                  tabIndex={0}
                                  type="button"
                                >
                                  <button
                                    className="MuiButtonBase-root-87 MuiButton-root-73 MuiButton-flatPrimary-76 MuiButton-dense-74 MuiCardActions-actionSpacing-72"
                                    disabled={false}
                                    id="edit-comp"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchStart={[Function]}
                                    role="button"
                                    tabIndex={0}
                                    type="button"
                                  >
                                    <span
                                      className="MuiButton-label-75"
                                    >
                                      Composition
                                    </span>
                                    <withStyles(TouchRipple)
                                      center={false}
                                      innerRef={[Function]}
                                    >
                                      <TouchRipple
                                        center={false}
                                        classes={
                                          Object {
                                            "0%": "%",
                                            "100%": "00%",
                                            "50%": "0%",
                                            "ripple": "MuiTouchRipple-ripple-93",
                                            "rippleFast": "MuiTouchRipple-rippleFast-95",
                                            "rippleVisible": "MuiTouchRipple-rippleVisible-94",
                                            "root": "MuiTouchRipple-root-89",
                                            "wrapper": "MuiTouchRipple-wrapper-90",
                                            "wrapperLeaving": "MuiTouchRipple-wrapperLeaving-91",
                                            "wrapperPulsating": "MuiTouchRipple-wrapperPulsating-92",
                                          }
                                        }
                                      >
                                        <TransitionGroup
                                          childFactory={[Function]}
                                          className="MuiTouchRipple-root-89"
                                          component="span"
                                          enter={true}
                                          exit={true}
                                        >
                                          <span
                                            className="MuiTouchRipple-root-89"
                                          />
                                        </TransitionGroup>
                                      </TouchRipple>
                                    </withStyles(TouchRipple)>
                                  </button>
                                </ButtonBase>
                              </withStyles(ButtonBase)>
                            </Button>
                          </withStyles(Button)>
                        </div>
                      </CardActions>
                    </withStyles(CardActions)>
                  </div>
                </Paper>
              </withStyles(Paper)>
            </Card>
          </InvestBucket>
        </div>
      </InvestBucketRelay>
    </Relay(InvestBucketRelay)>
  </div>
</CtxProvider>
`;
